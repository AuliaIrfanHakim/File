#kcb pertemuan 4
class Expr:
    def __init__(self, op, *args):
        self.op = op
        self.args = args

    def __str__(self):
        # Menghasilkan representasi string yang sesuai untuk objek Expr
        if self.op == '~':
            return f'(~{self.args[0]})'
        elif self.op in ('|', '&', '==>'):
            return f'({self.args[0]} {self.op} {self.args[1]})'
        elif self.op == '<==':
            return f'({self.args[0]} <== {self.args[1]})'
        elif self.op == '<=>':
            return f'({self.args[0]} <=> {self.args[1]})'
        elif self.op == '^':
            return f'({self.args[0]} ^ {self.args[1]})'
        else:
            return str(self.op)  # Menggunakan representasi string default jika tidak ada aturan khusus

def is_prop_symbol(s):
    return isinstance(s, str) and s[:1].isalpha() and s[0].isupper()

def is_true(exp, model={}):
    if exp in (True, False):
        return exp
    
    op, args = exp.op, exp.args
    
    if is_prop_symbol(op):
        return model.get(exp, None)
    
    elif op == '~':
        p = is_true(args[0], model)
        if p is None:
            return None
        else:
            return not p
    
    elif op == '|':
        result = False
        for arg in args:
            p = is_true(arg, model)
            if p is True:
                return True
            if p is None:
                result = None
        return result
    
    elif op == '&':
        result = True
        for arg in args:
            p = is_true(arg, model)
            if p is False:
                return False
            if p is None:
                result = None
        return result
    
    elif op == '==>':
        return is_true(~args[0] | args[1], model)
    
    elif op == '<==':
        return is_true(args[0] | ~args[1], model)
    
    p, q = args
    pt = is_true(p, model)
    if pt is None:
        return None
    qt = is_true(q, model)
    if qt is None:
        return None
    
    if op == '<=>':
        return pt == qt
    elif op == '^':
        return pt != qt
    else:
        raise ValueError("illegal operator " + str(exp))

if __name__ == '__main__':
    # Membuat objek Expr untuk simbol proposisi A dan B
    A = Expr('A')
    B = Expr('B')
    
    # Model berisi nilai-nilai simbol proposisi
    model = {A: False, B: True}
    
    # Membuat query logika (A & B)
    query = Expr('&', A, B)
    
    # Evaluasi query dengan model yang diberikan
    print(f'{query} : {is_true(query, model)}')  # Mencetak hasil evaluasi dengan representasi yang sesuai
